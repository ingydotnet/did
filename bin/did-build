#!/usr/bin/env bash

source "$(dirname $BASH_SOURCE)/../lib/use.bash"
use GetOpt

GETOPT_SPEC="\
  did build [<options>]

See 'did help build' for more help.

Options:
--
p,push    Push image after build
"

main() {
  [[ $# -gt 0 ]] || set -- --
  getopt "$@"
  [[ -e Dockerfile ]] ||
    error "No './Dockerfile'. Required for build."
  [[ -e docker-id.yml ]] ||
    error "No './docker-id.yml'. Required for build."

  local build_path="./.docker-id-$$"
  mkdir -p "$build_path"

  docker build --rm=true . | tee "$build_path/log"
  local image_id="$(tail -n1 "$build_path/log" | cut -d' ' -f3)"
  [[ $image_id =~ ^[0-9a-f]+$ ]] || die ">>$image_id<<"
  rm -f "$build_path/log"

  cp Dockerfile "$build_path/Dockerfile.$image_id"
  cp docker-id.yml "$build_path"
  cat docker-id.yml | yaml2json --pretty \
    > "$build_path/docker-id.json"
  for doc in *.swim; do
    cat $doc | did run swim --to=man > "$build_path/man.1"
    break
  done

  eval "$(yaml2bash < docker-id.yml)"

  local label="$(cat docker-id.yml | yaml2json)"
  label="${label//\"/\\\"}"

  cat <<... > "$build_path/Dockerfile"
FROM $image_id

LABEL com.dockerid.id "$label"

COPY ./ /docker-id/

ENTRYPOINT ["/bin/cat", "/docker-id/docker-id.yml"]
...

  ( cd "$build_path" && docker build --rm=true --tag "$did_tag" . )

  rm -fr "$build_path"

  if $option_push; then
    docker push "$did_tag"
  fi
}

[[ $0 != "$BASH_SOURCE" ]] || main "$@"

# vim: set ft=sh lisp:
